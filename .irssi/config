statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $itemname%_%r@%n%_$tag{sbmode $M}}";
    window_empty = "{sb {sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = "$topic";
    topic_empty = "Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb . $0-}";
    act = "{sb ! $0-}";
    more = "{hilight ↓}";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "0";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        user = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
         = { alignment = "right"; };
        char_count = { alignment = "right"; priority = "-1"; };
        barend = { priority = "100"; alignment = "right"; };
        connection_notice = { };
        typing_notice = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topicche = { priority = "0"; };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    prompt = {
      items = {
        uberprompt = { priority = "-1"; };
        input = { priority = "10"; };
        empty = { alignment = "right"; };
        vim_mode = { };
      };
      position = "100";
    };
  };
};

settings = {
  core = {
    real_name = "I don't care.";
    user_name = "meh";
    nick = "meh";
    timestamp_format = "%H:%M:%S";
    quit_message = "I don't want to live on this planet anymore.";
    log_timestamp = "%H:%M:%S ";
    recode_out_default_charset = "UTF-8";
    recode_transliterate = "yes";
  };

  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = {
    autolog = "yes";
    autocreate_split_windows = "no";
    theme = "darkblood";
    completion_char = ",";
    activity_hide_level = "joins parts quits kicks modes invites nicks";
    hilight_act_color = "%W";
    hilight_color = "%W";
  };

  "irc/core" = {
    alternate_nick = "meh`";
    skip_motd = "yes";
    ctcp_version_reply = "mIRC v7.19 Khaled Mardam-Bey";
    cmds_max_at_once = "9001";
    cmd_queue_speed = "0msec";
    ctcp_userinfo_reply = "Why hello there!";
  };
  "perl/core/scripts" = {
    bitlbee_typing_allwin = "no";
    bitlbee_send_typing = "no";
    notice_connection_of = "Jess ete";
    current_window_notification = "yes";
    always_notify = "#loev@loev";
    ignore_notifications_from = "&bitlbee@*";
    twtopic_instruct = "yes";
    twtopic_size = "100";
    command_on_notification = " ";
    autoleave_channels = "#99chan@99chan";
    autoleave_message = "sloth is dicks, and so is sours";
    always_notify_current_window = "no";
    bitlbee_tags = "ims";
    vim_mode_map_leader = "ò";
    uberprompt_format = "%r└[%W%_$uber%_%r]>%n ";
    uberprompt_load_hook = "/^vm_add";
    uberprompt_unload_hook = "/^vm_del";
    topicche_refresh = "150";
    trackbar_string = "─";
    trackbarre_char = "─";
    trackbarre_theme = "%K";
    trackbarre_separator = "─";
    uberprompt_format_empty = "%r└|>%n ";
    uberprompt_trim_data = "yes";
    topicche_format = "%U%W%_";
    topicche_center = "no";
  };

  "irc/dcc" = { dcc_port = "2707"; };
};

completions = {
  google = { value = "\002\0032G\0034o\0038o\0032g\0033l\0034e\003\002"; auto = "yes"; };
  vagina = { value = "\00313vagina\003"; auto = "yes"; };
  giallo = { value = "\0038giallo\003"; auto = "yes"; };
  7q = { value = "/q"; auto = "yes"; };
  ":purrface:" = { value = "( ･ ◡◡･)"; auto = "yes"; };
  ":gface:" = { value = "( ≖‿≖)"; auto = "yes"; };
  ":gface+:" = {
    value = "( ≖‿≖( ≖‿( ≖‿( ≖‿≖)‿≖)‿≖)≖‿≖)";
    auto = "yes";
  };
  ".)" = { value = ":)"; auto = "yes"; };
  ":mikuface:" = {
    value = "\00311/\003\0036°\003\00311(\003  ≖‿≖\00311)\003\0036°\003\00311\\\003";
    auto = "yes";
  };
  ":flowerface:" = { value = "\00313✿ =^_^= ✿\003"; auto = "yes"; };
  ":no:" = {
    value = "⡗⢼⣏⣹⡀⢇⡸⡮⢵⡅ ⢇⡸⡅⡮⢵";
    auto = "yes";
  };
  ":gface++:" = {
    value = "(≖‿( ≖‿≖)≖‿≖)≖‿( ≖‿( ≖‿≖( ≖‿≖ )≖‿≖ )‿≖(≖‿≖(≖‿≖ )‿≖)";
    auto = "yes";
  };
  ":^_^:" = { value = "◔ ◡ ◔"; auto = "yes"; };
  ":O_O:" = { value = "⨀_⨀"; auto = "yes"; };
  ":X_X:" = { value = "⨂_⨂"; auto = "yes"; };
  ":meh:" = { value = "ヽ(´ｰ｀ )ﾉ"; auto = "yes"; };
  ":=^_^=:" = { value = "｡◕‿‿◕｡"; auto = "yes"; };
  ":>_<:" = { value = "(≧ロ≦)"; auto = "yes"; };
  ":-_-:" = { value = "(￣ー￣)"; auto = "yes"; };
  ":))" = { value = "ツ"; auto = "yes"; };
  ":outtahere:" = {
    value = "(╯°□°）╯︵ ┻━┻";
    auto = "yes";
  };
  ":trollmode:" = {
    value = "( ._.) (  ._) (    :) (     ) (≖    ) (‿≖  ) (≖‿≖ ) (≖‿≖) ( ≖‿≖)";
    auto = "yes";
  };
  ":coobie:" = {
    value = "\0031,0／人\0035◕ \003\0031,0‿‿\0035 ◕\003\0031,0人＼\003";
    auto = "yes";
  };
  ":derpface:" = { value = "◕ ◡ ◔"; auto = "yes"; };
  ":gimmekiss:" = { value = "(づ￣ ³￣)づ"; auto = "yes"; };
  ":fight:" = { value = "ლ(｀ー´ლ)"; auto = "yes"; };
  Bronsa = { value = "bronsa"; auto = "yes"; };
  "Bronsa," = { value = "bronsa,"; auto = "yes"; };
  ":sadface:" = { value = "( ≖︵≖)"; auto = "yes"; };
  ":happyface:" = { value = "(っ⌒‿⌒)っ"; auto = "yes"; };
  ":pedobear:" = { value = "ᶘ ᵒᴥᵒᶅ"; auto = "yes"; };
  ":why:" = { value = "\0035,0\026\002WHY\002\026\003"; auto = "yes"; };
  ":dealwithit:" = { value = "(⌐■_■)"; auto = "yes"; };
  7q = { value = "/q"; auto = "yes"; };
};


hilights = (
  {
    text = "(^|[^0-9A-z])meh([^0-9A-z]|$)";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  {
    text = "(^|[^0-9A-z])chobi([^0-9A-z]|$)";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  {
    text = "(^|[^0-9A-z])cp([^0-9A-z]|$)";
    nick = "yes";
    word = "yes";
    regexp = "yes";
  },
  { text = "meh99"; nick = "yes"; word = "yes"; },
  { text = "innocuous"; nick = "yes"; word = "yes"; }
);

keyboard = (
  { key = "meta-!"; id = "change_window"; data = "12"; },
  { key = "window-1"; id = "change_window"; data = "11"; },
  { key = "meta2-1"; id = "change_window"; data = "11"; },
  { key = "meta-'"; id = "change_window"; data = "11"; },
  { key = "meta-ì"; id = "change_window"; data = "12"; },
  { key = "meta-\""; id = "change_window"; data = "13"; },
  { key = "meta-£"; id = "change_window"; data = "14"; },
  { key = "meta-$"; id = "change_window"; data = "15"; },
  { key = "meta-%"; id = "change_window"; data = "16"; },
  { key = "meta-&"; id = "change_window"; data = "17"; },
  { key = "meta-/"; id = "change_window"; data = "18"; },
  { key = "meta-("; id = "change_window"; data = "19"; },
  { key = "meta-)"; id = "change_window"; data = "20"; },
  { key = "meta-="; id = "change_window"; data = "21"; },
  { key = "meta-?"; id = "change_window"; data = "22"; }
);
logs = { };
ignores = (
  { mask = "BUTTSERV"; level = "ALL"; },
  { mask = "PENISERV"; level = "ALL"; },
  { mask = "trenchfoot"; level = "ALL"; },
  { mask = "Shazbutt"; level = "ALL"; },
  { mask = "GETOUT*"; level = "ALL"; },
  { mask = "*Smurph*"; level = "ALL"; }
);

aliases = {
  vm_add = "/^statusbar prompt add -after input -alignment right vim_mode";
  vm_del = "/^statusbar prompt remove vim_mode";
};
